"""
Data migration to switch TextChoices values in database from
English values to German labels.
"""

# Generated by Django 4.2.13 on 2024-07-24 07:01

import logging
from django.db import migrations

logger = logging.getLogger(__name__)


# list of tuples consisting of English values and German labels
# used in TextChoices fields in entity model classes
TEMPORAL_ORDER_CHOICES = [
    ("chronological", "chronologisch"),
    ("anachronic", "anachronisch"),
    ("achronic", "achronisch"),
]
TEMPORAL_DURATION_CHOICES = [
    ("scene", "Szene"),
    ("stretch", "Dehnung"),
    ("summary", "Raffung"),
    ("ellipsis", "Ellipse"),
    ("pause", "Pause"),
]
TEMPORAL_FREQUENCY_CHOICES = [
    ("singulative", "singulativ"),
    ("repetitive", "repetitiv"),
    ("iterative", "iterativ"),
]
FIGURE_SPEECH_CHOICES = [
    ("direct_quotation", "direkt zitierend"),
    ("direct_figure_speech", "autonome, direkte Figurenrede"),
    ("direct_speech", "direkte Rede"),
    ("indirect_speech", "indirekte Rede"),
    ("narrated_monologue", "erlebte Rede"),
]
REPRESENTATION_OF_THOUGHT_CHOICES = [
    ("quoted_monologue", "Zitat"),
    ("psycho_narration", "erzählter Monolog"),
    ("autonomous_monologue", "autonomer Monolog"),
    ("stream_of_consciousness", "Bewusstseinsstrom"),
]
FOCALIZATION_CHOICES = [
    ("zero", "Nullfokalisierung"),
    ("internal_variable", "interne Fokalisierung – variabel"),
    ("internal_fixed", "interne Fokalisierung – fixiert"),
    ("external", "externe Fokalisierung"),
]
NARRATIVE_SITUATION_CHOICES = [
    ("authorial", "auktorial"),
    ("neutral", "neutral"),
    ("figural", "personal"),
    ("first-person", "Ich-Erzähler*in"),
]
NARRATIVE_CHRONOLOGY_CHOICES = [
    ("prior", "früheres Erzählen"),
    ("simultaneous", "gleichzeitiges Erzählen"),
    ("subsequent", "späteres Erzählen"),
]
NARRATIVE_LEVEL_CHOICES = [
    ("extra", "extradiegetisch"),
    ("intra", "intradiegetisch"),
    ("meta", "metadiegetisch"),
]
NARRATIVE_VOICE_CHOICES = [
    ("heterodiegetic", "heterodiegetisches Erzählen"),
    (
        "homodiegetic_uninvolved",
        "homodiegetisches Erzählen – unbeteiligter Beobachter:in",
    ),
    (
        "homodiegetic_participant",
        "homodiegetisches Erzählen – beteiligter Beobachter:in",
    ),
    ("homodiegetic_character", "homodiegetisches Erzählen – Nebenfigur"),
    ("homodiegetic_protagonist", "homodiegetisches Erzählen – Hauptfigur"),
]
EDITION_TYPE_CHOICES = [
    ("first_edition", "Erstausgabe"),
    ("reference_edition", "Referenzausgabe"),
]
CHARACTER_RELEVANCY_CHOICES = [
    ("protagonist", "Hauptfigur"),
    ("supporting_character", "Nebenfigur"),
    ("referenced_character", "erwähnte Figur"),
]
CHARACTER_FICTIONALITY_CHOICES = [
    ("fictional_character", "fiktive Figur"),
    ("historical_character", "historische Figur"),
    ("mythical_character", "mythologische Figur"),
]

# list of dicts which link TextChoices classes to fields (and models)
# they are used in
CHOICES_FIELDS = [
    {
        "models": ["Work", "VersionWork"],
        "fields": [
            {
                "name": "temporal_order",
                "type": "ArrayField",
                "choices": TEMPORAL_ORDER_CHOICES,
            },
            {
                "name": "temporal_duration",
                "type": "ArrayField",
                "choices": TEMPORAL_DURATION_CHOICES,
            },
            {
                "name": "temporal_frequency",
                "type": "ArrayField",
                "choices": TEMPORAL_FREQUENCY_CHOICES,
            },
            {
                "name": "figure_speech",
                "type": "ArrayField",
                "choices": FIGURE_SPEECH_CHOICES,
            },
            {
                "name": "representation_of_thought",
                "type": "ArrayField",
                "choices": REPRESENTATION_OF_THOUGHT_CHOICES,
            },
            {
                "name": "focalization",
                "type": "ArrayField",
                "choices": FOCALIZATION_CHOICES,
            },
            {
                "name": "narrative_situation",
                "type": "ArrayField",
                "choices": NARRATIVE_SITUATION_CHOICES,
            },
            {
                "name": "narrative_chronology",
                "type": "ArrayField",
                "choices": NARRATIVE_CHRONOLOGY_CHOICES,
            },
            {
                "name": "narrative_level",
                "type": "ArrayField",
                "choices": NARRATIVE_LEVEL_CHOICES,
            },
            {
                "name": "narrative_voice",
                "type": "ArrayField",
                "choices": NARRATIVE_VOICE_CHOICES,
            },
        ],
    },
    {
        "models": ["Expression", "VersionExpression"],
        "fields": [
            {
                "name": "edition_type",
                "type": "ArrayField",
                "choices": EDITION_TYPE_CHOICES,
            },
        ],
    },
    {
        "models": ["Character", "VersionCharacter"],
        "fields": [
            {
                "name": "relevancy",
                "type": "CharField",
                "choices": CHARACTER_RELEVANCY_CHOICES,
            },
            {
                "name": "fictionality",
                "type": "ArrayField",
                "choices": CHARACTER_FICTIONALITY_CHOICES,
            },
        ],
    },
]


def convert_english_field_values_to_german(apps, schema_editor):
    """
    Replace English values for field choices in database with German labels.

    Assumes affected fields are either CharFields or ArrayFields with
    CharFields for base_field (i.e. contain a list of string values).
    """
    for item in CHOICES_FIELDS:
        for model in item["models"]:
            model_class = apps.get_model("apis_ontology", model)

            for obj in model_class.objects.all():
                for field in item["fields"]:
                    field_name = field["name"]
                    field_type = field["type"]
                    field_choices = field["choices"]

                    field_data = getattr(obj, field_name, None)

                    if field_data:
                        converted_data = field_data

                        if field_type == "ArrayField":
                            converted_data = []
                            for value in field_data:
                                for c in field_choices:
                                    if value == c[0]:  # if English value...
                                        value = c[1]  # ... set German label
                                converted_data.append(value)

                        if field_type == "CharField":
                            for c in field_choices:
                                if field_data == c[0]:  # if English value...
                                    converted_data = c[1]  # ... set German label

                        if converted_data != field_data:
                            setattr(obj, field_name, converted_data)

                            logger.debug(
                                f"Converted: {','.join(field_data) if isinstance(field_data, list) else field_data} "
                                f"-> {','.join(converted_data) if isinstance(converted_data, list) else converted_data} "
                                f"({model} ID: {getattr(obj, 'id', [])})"
                            )

                            if hasattr(obj, "skip_history_when_saving"):
                                obj.skip_history_when_saving = True

                            obj.save()


def convert_back_german_field_values_to_english(apps, schema_editor):
    """
    Replace German values for field choices (derived from German labels)
    with the original English values.

    Assumes affected fields are either CharFields or ArrayFields with
    CharFields for base_field (i.e. contain a list of string values).
    """
    for item in CHOICES_FIELDS:
        for model in item["models"]:
            model_class = apps.get_model("apis_ontology", model)

            for obj in model_class.objects.all():
                for field in item["fields"]:
                    field_name = field["name"]
                    field_type = field["type"]
                    field_choices = field["choices"]

                    field_data = getattr(obj, field_name, None)

                    if field_data:
                        converted_data = field_data

                        if field_type == "ArrayField":
                            converted_data = []
                            for value in field_data:
                                for c in field_choices:
                                    if value == c[1]:  # if German label...
                                        value = c[0]  # ... set English value
                                converted_data.append(value)

                        if field_type == "CharField":
                            for c in field_choices:
                                if field_data == c[1]:  # if German label...
                                    converted_data = c[0]  # ... set English value

                        if converted_data != field_data:
                            setattr(obj, field_name, converted_data)

                            logger.debug(
                                f"Converted: {','.join(field_data) if isinstance(field_data, list) else field_data} "
                                f"-> {','.join(converted_data) if isinstance(converted_data, list) else converted_data} "
                                f"({model} ID: {getattr(obj, 'id', [])})"
                            )

                            if hasattr(obj, "skip_history_when_saving"):
                                obj.skip_history_when_saving = True

                            obj.save()


class Migration(migrations.Migration):
    dependencies = [
        (
            "apis_ontology",
            "0079_data_migration_strip_choices_values",
        ),
    ]

    operations = [
        migrations.RunPython(
            code=convert_english_field_values_to_german,
            reverse_code=convert_back_german_field_values_to_english,
        ),
    ]
