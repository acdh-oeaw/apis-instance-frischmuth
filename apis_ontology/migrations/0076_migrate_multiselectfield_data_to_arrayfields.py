# Generated by Django 4.2.13 on 2024-07-26 12:53

import logging
from django.db import migrations

logger = logging.getLogger(__name__)

RELEVANT_FIELDS = [
    {
        "model_classes": [
            "Character",
            "VersionCharacter",
        ],
        "multiselect_field": "fictionality",
        "array_field": "new_fictionality",
    },
    {
        "model_classes": [
            "Expression",
            "VersionExpression",
        ],
        "multiselect_field": "edition_type",
        "array_field": "new_edition_type",
    },
]


def copy_multiselect_values(apps, schema_editor):
    """
    Copy values from leftover MultiSelectFields to new ArrayFields meant to
    replace them â€“ if the values are not yet present in the ArrayFields.
    """
    for field in RELEVANT_FIELDS:
        for m in field["model_classes"]:
            model_class = apps.get_model("apis_ontology", m)
            for obj in model_class.objects.all():
                multiselect_data = getattr(obj, field["multiselect_field"], "")
                array_field_data = getattr(obj, field["array_field"], [])

                if multiselect_data:
                    multi_values = [
                        v for v in str(multiselect_data).split(",") if len(v) > 0
                    ]

                    for m_val in multi_values:
                        if m_val not in array_field_data:
                            array_field_data.append(m_val)

                    setattr(obj, field["array_field"], array_field_data)
                    if hasattr(obj, "skip_history_when_saving"):
                        obj.skip_history_when_saving = True
                    obj.save()


def remove_array_field_values(apps, schema_editor):
    """
    Remove values from ArrayFields if they also (still) exist on the
    MultiSelectFields which are meant to be replaced by the ArrayFields.

    Best guess/approximation operation.
    """
    for field in RELEVANT_FIELDS:
        for m in field["model_classes"]:
            model_class = apps.get_model("apis_ontology", m)
            for obj in model_class.objects.all():
                multiselect_data = getattr(obj, field["multiselect_field"], "")
                array_field_data = getattr(obj, field["array_field"], [])

                if array_field_data and multiselect_data:
                    multi_values = [
                        v for v in str(multiselect_data).split(",") if len(v) > 0
                    ]
                    in_both = [
                        a_val for a_val in array_field_data if a_val in multi_values
                    ]

                    for val in in_both:
                        try:
                            array_field_data.remove(val)
                        except ValueError:
                            pass

                    setattr(obj, field["array_field"], array_field_data)
                    if hasattr(obj, "skip_history_when_saving"):
                        obj.skip_history_when_saving = True
                    obj.save()


class Migration(migrations.Migration):
    dependencies = [
        ("apis_ontology", "0075_alter_character_fictionality_and_more"),
    ]

    operations = [
        migrations.RunPython(copy_multiselect_values, remove_array_field_values),
    ]
